Index: src/Service/impl/MenusServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Service.impl;\r\n\r\nimport Enums.Category;\r\nimport Exceptions.ExceptionIncorrectPassword;\r\nimport Models.Beverage;\r\nimport Models.Food;\r\nimport Models.ProductForSale;\r\nimport Models.Supermarket;\r\nimport Service.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Scanner;\r\n\r\npublic class MenusServiceImpl implements MenusService {\r\n    private static final String privateAccesKey = \"1234\";\r\n    protected FoodServiceImpl foodService;\r\n    protected BeverageServiceImpl beverageService;\r\n    protected SupermarketService supermarketService = new SupermarketServiceImpl();\r\n    protected CartService cartService = new CartServiceImpl();\r\n    protected ProductForSaleService productForSaleService = new ProductForSaleServiceImpl();\r\n    protected ProductServiceImpl productService = new ProductServiceImpl();\r\n\r\n    public MenusServiceImpl() throws IOException {\r\n        try {\r\n            foodService = ProductPersistenceImpl.startFoodService();\r\n            beverageService = ProductPersistenceImpl.startBeverageService();\r\n            foodService.startID();\r\n            beverageService.startID();\r\n\r\n        } catch (IOException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void initialMenu() throws IOException {\r\n\r\n        Scanner sc = new Scanner(System.in);\r\n        Integer opc = null;\r\n        Boolean retry;\r\n\r\n        do {\r\n            System.out.println(\"================= MENU PRINCIPAL ======================\");\r\n            System.out.println(\"\\n\");\r\n            System.out.println(\"            [1] MENU USUARIO\");\r\n            System.out.println(\"            [2] ACCESO PRIVADO\");\r\n            System.out.println(\"            [0] SALIR\\n\");\r\n\r\n            do {\r\n                retry = false;\r\n                try {\r\n                    System.out.print(\">\");\r\n                    opc = Integer.parseInt(sc.nextLine());\r\n\r\n                    switch (opc) {\r\n                        case 1:\r\n                            clientMenu();\r\n                            break;\r\n                        case 2:\r\n                            try {\r\n                                Boolean ok = false;\r\n                                Integer attempts = 3;\r\n                                do {\r\n                                    System.out.println(\"Ingrese la clave de acceso: \");\r\n                                    Scanner scanner = new Scanner(System.in);\r\n                                    String key = scanner.nextLine();\r\n                                    if (key.equalsIgnoreCase(privateAccesKey)) {\r\n                                        ok = true;\r\n                                    } else {\r\n                                        System.out.println(\"Clave incorrecta\");\r\n                                    }\r\n                                    attempts--;\r\n                                } while (attempts > 0 && !ok);\r\n                                if (!ok) {\r\n                                    throw new ExceptionIncorrectPassword(\"Todas las contraseñas ingresadas son incorrectas. Llame al 111\");\r\n                                } else {\r\n                                    privateAccessMenu();\r\n                                }\r\n                            } catch (ExceptionIncorrectPassword e) {\r\n                                System.out.println(e.getMessage());\r\n                            }\r\n                            break;\r\n                        case 0:\r\n                            break;\r\n                        default:\r\n                            System.out.println(\"Ingrese una opcion correcta!\");\r\n                            break;\r\n                    }\r\n                } catch (NumberFormatException e) {\r\n                    System.out.println(\"Opción no disponible\");\r\n                    retry = true;\r\n                }\r\n            } while (retry);\r\n\r\n        } while (opc != 0);\r\n    }//LISTO CON CONTRASEÑA VALIDADA/TRES INTENTOS\r\n\r\n    @Override\r\n    public void clientMenu() throws IOException {\r\n        Scanner sc = new Scanner(System.in);\r\n        Integer opc = null;\r\n        Boolean retry;\r\n\r\n        do {\r\n            System.out.println(\"======================= CREAR LISTA ============================\");\r\n            System.out.println(\"\\n\");\r\n            System.out.println(\"            [1] CREAR LISTA POR SUPERMERCADO\");\r\n            System.out.println(\"            [2] CREAR LISTA EN GENERAL\");\r\n            System.out.println(\"            [0] SALIR\\n\");\r\n\r\n            do {\r\n                retry = false;\r\n                try {\r\n                    System.out.print(\">\");\r\n                    opc = Integer.parseInt(sc.nextLine());\r\n\r\n                    switch (opc) {\r\n                        case 1:\r\n                            shoppingListMenuBySupermarket();\r\n                            break;\r\n                        case 2:\r\n                            shoppingListMenu();\r\n                            break;\r\n                        case 0:\r\n                            System.out.println(\"\\n\\n\\n\\n\\n\");\r\n                            break;\r\n                        default:\r\n                            System.out.println(\"Ingrese una opcion correcta!\");\r\n                            break;\r\n\r\n                    }\r\n                } catch (NumberFormatException e) {\r\n                    System.out.println(\"Opción no disponible\");\r\n                    retry = true;\r\n                }\r\n            } while (retry);\r\n\r\n        } while (opc != 0);\r\n    }//LISTO\r\n\r\n    @Override\r\n    public void shoppingListMenu() throws IOException {\r\n        Scanner sc = new Scanner(System.in);\r\n        Integer opc = null;\r\n        Boolean retry;\r\n\r\n        do {\r\n            System.out.println(\"======================= BUSQUEDA DE PRODUCTOS EN TODOS LOS SUPERMERCADOS ============================\");\r\n            System.out.println(\"\\n\");\r\n            System.out.println(\"            [1] POR NOMBRE DE PRODUCTO\");\r\n            System.out.println(\"            [2] POR PRODUCTOS EN OFERTAS\");\r\n            System.out.println(\"            [3] POR CATEGORIA\");\r\n            System.out.println(\"            [4] TU LISTA DE COMPRAS\");\r\n            System.out.println(\"            [5] MODIFICAR TU LISTA DE COMPRAS\");\r\n            System.out.println(\"            [0] SALIR\\n\");\r\n\r\n            do {\r\n                retry = false;\r\n                try {\r\n                    System.out.print(\">\");\r\n                    opc = Integer.parseInt(sc.nextLine());\r\n\r\n                    switch (opc) {\r\n                        case 1:\r\n                            //region Busqueda por nombre de producto en TODOS los supermercados\r\n                            System.out.println(\"Ingrese el nombre del producto que esta buscando\");\r\n                            String nameProduct = sc.nextLine();\r\n                            List<ProductForSale> productsList = supermarketService.searchSpecialProductsByName(nameProduct);\r\n                            if (!productsList.isEmpty()) {\r\n                                productForSaleService.addCartFromListProductForSale(productsList);\r\n                            } else {\r\n                                System.out.println(\"El supermercado aun no tiene productos con esa descripcion\");\r\n                            }\r\n                            //endregion\r\n                            break;\r\n                        case 2:\r\n                            //region Busqueda por oferta en TODOS los supermercados\r\n                            Integer numProductSale;\r\n                            List<ProductForSale> productsInSale = supermarketService.searchSalesProducts();\r\n                            System.out.println(\">>>>>>>>>>>>>>>>>> LISTA DE PRODUCTOS EN OFERTA <<<<<<<<<<<<<<<<<<<<<<\");\r\n                            if (!productsInSale.isEmpty()) {\r\n                                productForSaleService.addCartFromListProductForSale(productsInSale);\r\n                            } else {\r\n                                System.out.println(\"El supermercado aun no tiene productos en oferta\");\r\n                            }\r\n                            //endregion\r\n                            break;\r\n                        case 3:\r\n                            //region Busqueda de productos por categoria en TODOS los supermercados\r\n                            System.out.println(\"Ingrese la categoria que desee : \");\r\n                            Integer categorySelect;\r\n                            do {\r\n                                ProductServiceImpl.showCategories();\r\n                                categorySelect = sc.nextInt();\r\n                                switch (categorySelect) {\r\n                                    case 0:\r\n                                        List<ProductForSale> listDairy = supermarketService.searchProductsByCategory(Category.DAIRY);\r\n                                        if (!listDairy.isEmpty()) {\r\n                                            productForSaleService.addCartFromListProductForSale(listDairy);\r\n                                        } else {\r\n                                            System.out.println(\"No existe la categoria lacteos en los supermercados\");\r\n                                        }\r\n                                        break;\r\n                                    case 1:\r\n                                        List<ProductForSale> listBakery = supermarketService.searchProductsByCategory(Category.BAKERY);\r\n                                        if (!listBakery.isEmpty()) {\r\n                                            productForSaleService.addCartFromListProductForSale(listBakery);\r\n                                        } else {\r\n                                            System.out.println(\"No existe la categoria panaderia en los supermercados\");\r\n                                        }\r\n                                        break;\r\n                                    case 2:\r\n                                        List<ProductForSale> listGrocery = supermarketService.searchProductsByCategory(Category.GROCERY);\r\n                                        if (!listGrocery.isEmpty()) {\r\n                                            productForSaleService.addCartFromListProductForSale(listGrocery);\r\n                                        } else {\r\n                                            System.out.println(\"No existe la categoria alimentos en los supermercados\");\r\n                                        }\r\n                                        break;\r\n                                    case 3:\r\n                                        List<ProductForSale> listAlcohol = supermarketService.searchProductsByCategory(Category.ALCOHOL);\r\n                                        if (!listAlcohol.isEmpty()) {\r\n                                            productForSaleService.addCartFromListProductForSale(listAlcohol);\r\n                                        } else {\r\n                                            System.out.println(\"No existe la categoria bebidas alcoholicas en los supermercados\");\r\n                                        }\r\n                                        break;\r\n                                    default:\r\n                                        System.out.println(\"Ingrese un numero de categoria correcto\");\r\n                                        break;\r\n                                }\r\n                            } while (categorySelect != 0 && categorySelect != 1 && categorySelect != 2 && categorySelect != 3);\r\n                            //endregion\r\n                            break;\r\n                        case 4:\r\n                            //region Mostrar carrito y grabar\r\n                            cartService.showCartsProductList();\r\n                            System.out.println(\"Desea confirmar el carrito?. s/n\");\r\n                            if (sc.nextLine().equalsIgnoreCase(\"s\")) {\r\n                                cartService.saveCartList();\r\n                            } else {\r\n                                System.out.println(\"Continue agregando productos.\");\r\n                            }\r\n                            //endregion\r\n                            break;\r\n                        case 5:\r\n                            //region Modificar algo del carrito\r\n                            do {\r\n                                System.out.println(\"[1] Desea eliminar un producto\");\r\n                                System.out.println(\"[2] Desea modificar cantidad de un  producto\");\r\n                                System.out.println(\"[0] Salir\");\r\n                                opc = sc.nextInt();\r\n\r\n                                switch (opc) {\r\n                                    case 1:\r\n                                        cartService.deleteSomeProductOfCart();\r\n                                        break;\r\n                                    case 2:\r\n                                        cartService.modifyCartList();\r\n                                        break;\r\n                                    case 0:\r\n                                        break;\r\n                                    default:\r\n                                        System.out.println(\"Ingrese una opcion correcta\");\r\n                                        break;\r\n                                }\r\n                            } while (opc != 0);\r\n                            //endregion\r\n                            break;\r\n                        case 0:\r\n                            System.out.println(\"\\n\\n\\n\\n\\n\");\r\n                            break;\r\n                        default:\r\n                            System.out.println(\"Ingrese una opcion correcta!\");\r\n                            break;\r\n                    }\r\n                } catch (NumberFormatException e) {\r\n                    System.out.println(\"Opción no disponible\");\r\n                    retry = true;\r\n                }\r\n            } while (retry);\r\n        } while (opc != 0);\r\n    }//LISTO SOLO FALTA PROBAR\r\n\r\n    @Override\r\n    public void shoppingListMenuBySupermarket() throws IOException {\r\n        Scanner sc = new Scanner(System.in);\r\n        Integer opc = null;\r\n        Boolean retry;\r\n        Integer attempts = 3;//numero de intentos para que no se haga un bucle infinito hasta que ingrese una opcion correcta dentro del do/while\r\n        Supermarket supermarketSelect = new Supermarket();\r\n        List<ProductForSale> productsForSale = new ArrayList<>();\r\n\r\n        System.out.println(\"<<<<<<<<<<<<<<<<<<<<<<<<<< LISTADO DE SUPERMERCADOS >>>>>>>>>>>>>>>>>>>>>>>>>>\");\r\n        for (Map.Entry<String, Supermarket> entry : supermarketService.supermarketsListJson().entrySet()) {\r\n            System.out.println(entry);\r\n            System.out.println(\"_______________________________________________________________________________\");\r\n        }\r\n        System.out.println(\"Ingrese el supermercado deseado: \");\r\n\r\n        //region Validacion de ingreso correcto del supermercado seleccionado de la lista\r\n        do {\r\n            supermarketSelect = supermarketService.search(sc.nextLine());\r\n            if (supermarketSelect == null) {\r\n                System.out.println(\"Ingrese correctamente el nombre del supermercado...\");\r\n            }\r\n            attempts--;\r\n        } while (attempts >= 0 && supermarketSelect == null);\r\n        //endregion\r\n\r\n        if (supermarketSelect != null) {\r\n            do {\r\n                System.out.println(\"======================= BUSQUEDA DE PRODUCTOS POR SUPERMERCADO ============================\");\r\n                System.out.println(\"\\n\");\r\n                System.out.println(\"            [1] POR NOMBRE DE PRODUCTO\");\r\n                System.out.println(\"            [2] POR PRODUCTOS EN OFERTAS\");\r\n                System.out.println(\"            [3] POR CATEGORIA\");\r\n                System.out.println(\"            [4] TU LISTA DE COMPRAS\");\r\n                System.out.println(\"            [5] MODIFICAR TU LISTA DE COMPRAS\");\r\n                System.out.println(\"            [0] SALIR\\n\");\r\n\r\n                do {\r\n                    retry = false;\r\n                    try {\r\n                        System.out.print(\">\");\r\n                        opc = Integer.parseInt(sc.nextLine());\r\n\r\n                        switch (opc) {\r\n                            case 1:\r\n                                //region Busqueda de productos por nombre en un supermercado seleccionado\r\n                                System.out.println(\"Ingrese el nombre del producto buscado: \");\r\n                                productsForSale = supermarketService.serchProductByNameInSupermarket(supermarketSelect, sc.nextLine());\r\n                                if (!productsForSale.isEmpty()) {\r\n                                    productForSaleService.addCartFromListProductForSale(productsForSale);\r\n                                } else {\r\n                                    System.out.println(\"El supermercado aun no tiene productos con esa descripcion\");\r\n                                }\r\n                                //endregion\r\n                                break;\r\n                            case 2:\r\n                                //region Busqueda de productos en oferta en un supermercado seleccionado\r\n                                productsForSale = supermarketService.serchProductInSaleInSupermarket(supermarketSelect);\r\n                                if (!productsForSale.isEmpty()) {\r\n                                    productForSaleService.addCartFromListProductForSale(productsForSale);\r\n                                } else {\r\n                                    System.out.println(\"El supermercado aun no tiene productos en oferta\");\r\n                                }\r\n                                //endregion\r\n                                break;\r\n                            case 3:\r\n                                //region Busqueda de productos por categoria en un supermercado seleccionado\r\n                                Integer categorySelect;\r\n                                do {\r\n                                    ProductServiceImpl.showCategories();\r\n                                    categorySelect = sc.nextInt();\r\n                                    switch (categorySelect) {\r\n                                        case 0:\r\n                                            List<ProductForSale> listDairy = supermarketService.serchByCategoryInSupermarket(supermarketSelect, Category.DAIRY);\r\n                                            if (!listDairy.isEmpty()) {\r\n                                                productForSaleService.addCartFromListProductForSale(listDairy);\r\n                                            } else {\r\n                                                System.out.println(\"No existe la categoria lacteos en los supermercados\");\r\n                                            }\r\n                                            break;\r\n                                        case 1:\r\n                                            List<ProductForSale> listBakery = supermarketService.serchByCategoryInSupermarket(supermarketSelect, Category.BAKERY);\r\n                                            if (!listBakery.isEmpty()) {\r\n                                                productForSaleService.addCartFromListProductForSale(listBakery);\r\n                                            } else {\r\n                                                System.out.println(\"No existe la categoria panaderia en los supermercados\");\r\n                                            }\r\n                                            break;\r\n                                        case 2:\r\n                                            List<ProductForSale> listGrocery = supermarketService.serchByCategoryInSupermarket(supermarketSelect, Category.GROCERY);\r\n                                            if (!listGrocery.isEmpty()) {\r\n                                                productForSaleService.addCartFromListProductForSale(listGrocery);\r\n                                            } else {\r\n                                                System.out.println(\"No existe la categoria alimentos en los supermercados\");\r\n                                            }\r\n                                            break;\r\n                                        case 3:\r\n                                            List<ProductForSale> listAlcohol = supermarketService.serchByCategoryInSupermarket(supermarketSelect, Category.ALCOHOL);\r\n                                            if (!listAlcohol.isEmpty()) {\r\n                                                productForSaleService.addCartFromListProductForSale(listAlcohol);\r\n                                            } else {\r\n                                                System.out.println(\"No existe la categoria bebidas alcoholicas en los supermercados\");\r\n                                            }\r\n                                            break;\r\n                                        default:\r\n                                            System.out.println(\"Ingrese un numero de categoria correcto\");\r\n                                            break;\r\n                                    }\r\n                                } while (categorySelect != 0 && categorySelect != 1 && categorySelect != 2 && categorySelect != 3);\r\n                                //endregion\r\n                                break;\r\n                            case 4:\r\n                                //region Mostrar el carrito y grabar\r\n                                cartService.showCartsProductList();\r\n                                System.out.println(\"Desea confirmar el carrito?. s/n\");\r\n                                if (sc.nextLine().equalsIgnoreCase(\"s\")) {\r\n                                    cartService.saveCartList();\r\n                                } else {\r\n                                    System.out.println(\"Continue agregando productos.\");\r\n                                }\r\n                                //endregion\r\n                                break;\r\n                            case 5:\r\n                                //region Modificar carrito\r\n                                do {\r\n                                    System.out.println(\"[1] Desea eliminar un producto\");\r\n                                    System.out.println(\"[2] Desea modificar cantidad de un  producto\");\r\n                                    System.out.println(\"[0] Salir\");\r\n                                    opc = sc.nextInt();\r\n\r\n                                    switch (opc) {\r\n                                        case 1:\r\n                                            cartService.deleteSomeProductOfCart();\r\n                                            break;\r\n                                        case 2:\r\n                                            cartService.modifyCartList();\r\n                                            break;\r\n                                        case 0:\r\n                                            break;\r\n                                        default:\r\n                                            System.out.println(\"Ingrese una opcion correcta\");\r\n                                            break;\r\n                                    }\r\n                                } while (opc != 0);\r\n                                //endregion\r\n                                break;\r\n                            case 0:\r\n                                System.out.println(\"\\n\\n\\n\\n\\n\");\r\n                                break;\r\n                            default:\r\n                                System.out.println(\"Ingrese una opcion correcta!\");\r\n                                break;\r\n                        }\r\n                    } catch (NumberFormatException e) {\r\n                        System.out.println(\"Opción no disponible\");\r\n                        retry = true;\r\n                    }\r\n                } while (retry);\r\n            } while (opc != 0);\r\n        } else {\r\n            System.out.println(\"Se ha ingresado un nombre incorrecto! Vuelva a intentarlo.\");\r\n        }\r\n    }//LISTO SOLO FALTA PROBAR\r\n\r\n    @Override\r\n    public void privateAccessMenu() throws IOException {\r\n        Scanner sc = new Scanner(System.in);\r\n        Integer opc = null;\r\n        Boolean retry;\r\n\r\n        do {\r\n            System.out.println(\"======================= ADMINISTRACIÓN ============================\");\r\n            System.out.println(\"\\n\");\r\n            System.out.println(\"            [1] PRODUCTOS\");\r\n            System.out.println(\"            [2] SUPERMERCADOS\");\r\n            System.out.println(\"            [0] SALIR\\n\");\r\n\r\n            do {\r\n                retry = false;\r\n                try {\r\n                    System.out.print(\">\");\r\n                    opc = Integer.parseInt(sc.nextLine());\r\n\r\n                    switch (opc) {\r\n                        case 0:\r\n                            System.out.println(\"Volviendo...\");\r\n                            System.out.println(\"\\n\\n\\n\\n\\n\");\r\n                            break;\r\n                        case 1:\r\n                            privateAccessProductMenu();\r\n                            break;\r\n                        case 2:\r\n                            privateAccessSupermarketMenu();\r\n                            break;\r\n                        default:\r\n                            System.out.println(\"Opción no disponible\");\r\n                            break;\r\n                    }\r\n                } catch (NumberFormatException e) {\r\n                    System.out.println(\"Opción no disponible\");\r\n                    retry = true;\r\n                }\r\n            } while (retry);\r\n        } while (opc != 0);\r\n    }//LISTO\r\n\r\n    @Override\r\n    public void privateAccessProductMenu() {\r\n        Scanner sc = new Scanner(System.in);\r\n        Integer opc = null;\r\n        Boolean retry;\r\n\r\n        do {\r\n            System.out.println(\"======================= ABML PRODUCTO ============================\");\r\n            System.out.println(\"            [1] CREAR PRODUCTO\");\r\n            System.out.println(\"            [2] MODIFICAR PRODUCTO\");\r\n            System.out.println(\"            [3] ELIMINAR PRODUCTO\");\r\n            System.out.println(\"            [4] VER PRODUCTOS\");\r\n            System.out.println(\"            [0] SALIR\\n\");\r\n\r\n            do {\r\n                retry = false;\r\n                try {\r\n                    System.out.print(\">\");\r\n                    opc = Integer.parseInt(sc.nextLine());\r\n\r\n                    switch (opc) {\r\n                        case 0:\r\n                            System.out.println(\"Volviendo...\");\r\n                            break;\r\n                        case 1:\r\n                            privateAccessCreateProductMenu();\r\n                            break;\r\n                        case 2:\r\n                            privateAccessModifyProductMenu();\r\n                            break;\r\n                        case 3:\r\n                            privateAccessDeleteProductMenu();\r\n                            break;\r\n                        case 4:\r\n                            System.out.println(\"=BEBIDAS============\");\r\n                            beverageService.showAll();\r\n                            System.out.println(\"=COMIDAS============\");\r\n                            foodService.showAll();\r\n                            break;\r\n                        default:\r\n                            System.out.println(\"Opción no disponible\");\r\n                            break;\r\n                    }\r\n                } catch (NumberFormatException e) {\r\n                    System.out.println(\"Opción no disponible\");\r\n                    retry = true;\r\n                }\r\n            } while (retry);\r\n        } while (opc != 0);\r\n    }//FALTA VALIDACIONES...\r\n\r\n    @Override\r\n    public void privateAccessCreateProductMenu() {\r\n        Scanner sc = new Scanner(System.in);\r\n        Integer opc = null;\r\n        Boolean retry;\r\n\r\n        do {\r\n            System.out.println(\"======================= MENU CREAR PRODUCTO ============================\");\r\n            System.out.println(\"            [1] CREAR ALIMENTO\");\r\n            System.out.println(\"            [2] CREAR BEBIDA\");\r\n            System.out.println(\"            [0] SALIR\\n\");\r\n\r\n            do {\r\n                retry = false;\r\n                try {\r\n                    System.out.print(\">\");\r\n                    opc = Integer.parseInt(sc.nextLine());\r\n\r\n                    switch (opc) {\r\n                        case 0:\r\n                            System.out.println(\"Volviendo...\");\r\n                            break;\r\n                        case 1:\r\n                            try {\r\n                                foodService.create();\r\n                            } catch (IOException e) {\r\n                                System.out.println(\"Hubo un error al intentar guardar los cambios\");\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            try {\r\n                                beverageService.create();\r\n                            } catch (IOException e) {\r\n                                System.out.println(\"Hubo un error al intentar guardar los cambios\");\r\n                            }\r\n                            break;\r\n                        default:\r\n                            System.out.println(\"Opción no disponible\");\r\n                            break;\r\n                    }\r\n                } catch (NumberFormatException e) {\r\n                    System.out.println(\"Opción no disponible\");\r\n                    retry = true;\r\n                }\r\n            } while (retry);\r\n        } while (opc != 0);\r\n    }\r\n\r\n    public void privateAccessModifyProductMenu() {\r\n        Scanner sc = new Scanner(System.in);\r\n        Integer opc = null;\r\n        Boolean retry;\r\n\r\n        do {\r\n            System.out.println(\"======================= MENU MODIFICAR PRODUCTO ============================\");\r\n            System.out.println(\"            [1] MODIFICAR ALIMENTO\");\r\n            System.out.println(\"            [2] MODIFICAR BEBIDA\");\r\n            System.out.println(\"            [0] SALIR\\n\");\r\n\r\n            do {\r\n                retry = false;\r\n                try {\r\n                    System.out.print(\">\");\r\n                    opc = Integer.parseInt(sc.nextLine());\r\n\r\n                    switch (opc) {\r\n                        case 0:\r\n                            System.out.println(\"Volviendo...\");\r\n                            break;\r\n                        case 1:\r\n                            try {\r\n                                Food modified;\r\n                                if ((modified = foodService.modify(ProductServiceImpl.askForID())) != null) { //Si encuentro el producto buscado y logro modificarlo\r\n                                    System.out.println(\"Información modificada\");\r\n                                    supermarketService.updateProductData(modified); //Actualizo los datos del producto en los supermercados que lo contengan\r\n                                } else {\r\n                                    System.out.println(\"ID no encontrado\");\r\n                                }\r\n                            } catch (IOException e) {\r\n                                System.out.println(\"Hubo un error al intentar guardar los cambios\");\r\n                            }\r\n\r\n                            break;\r\n                        case 2:\r\n                            try {\r\n                                Beverage modified;\r\n                                if ((modified = beverageService.modify(ProductServiceImpl.askForID())) != null) { //Si encuentro el producto buscado y logro modificarlo\r\n                                    System.out.println(\"Información modificada\");\r\n                                    supermarketService.updateProductData(modified); //Actualizo los datos del producto en los supermercados que lo contengan\r\n                                } else {\r\n                                    System.out.println(\"ID no encontrado\");\r\n                                }\r\n                            } catch (IOException e) {\r\n                                System.out.println(\"Hubo un error al intentar guardar los cambios\");\r\n                            }\r\n                            break;\r\n                        default:\r\n                            System.out.println(\"Opción no disponible\");\r\n                            break;\r\n                    }\r\n                } catch (NumberFormatException e) {\r\n                    System.out.println(\"Opción no disponible\");\r\n                    retry = true;\r\n                }\r\n            } while (retry);\r\n        } while (opc != 0);\r\n    }\r\n\r\n    public void privateAccessDeleteProductMenu() { //AGREGAR BÚSQUEDA DE PRODUCTO EN SUPERMERCADOS\r\n        Scanner sc = new Scanner(System.in);\r\n        Integer opc = null;\r\n        Boolean retry;\r\n        Integer id;\r\n\r\n        do {\r\n            System.out.println(\"======================= MENU ELIMINAR PRODUCTO ============================\");\r\n            System.out.println(\"            [1] ELIMINAR ALIMENTO\");\r\n            System.out.println(\"            [2] ELIMINAR BEBIDA\");\r\n            System.out.println(\"            [0] SALIR\\n\");\r\n\r\n            do {\r\n                retry = false;\r\n                try {\r\n                    System.out.print(\">\");\r\n                    opc = Integer.parseInt(sc.nextLine());\r\n\r\n                    switch (opc) {\r\n                        case 0:\r\n                            System.out.println(\"Volviendo...\");\r\n                            break;\r\n                        case 1:\r\n                            try {\r\n                                System.out.println(\"ID:\");\r\n                                id = Integer.parseInt(sc.nextLine());\r\n                                if (foodService.delete(id) != null) {\r\n                                    System.out.println(\"Producto eliminado\");\r\n                                } else {\r\n                                    System.out.println(\"El producto no pudo ser eliminado\");\r\n                                    System.out.println(\"Si se trata de un error, corrobore que\\nexista y que no esté en ningún supermercado\");\r\n                                }\r\n                            } catch (IOException e) {\r\n                                System.out.println(\"Error\");\r\n                            } catch (NumberFormatException e) {\r\n                                System.out.println(\"Ingreso de datos erroneo\");\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            try {\r\n                                System.out.println(\"ID:\");\r\n                                id = Integer.parseInt(sc.nextLine());\r\n                                if (beverageService.delete(id) != null) {\r\n                                    System.out.println(\"Producto eliminado\");\r\n                                } else {\r\n                                    System.out.println(\"El producto no pudo ser eliminado\");\r\n                                    System.out.println(\"Si se trata de un error, corrobore que\\nexista y que no esté en ningún supermercado\");\r\n                                }\r\n                            } catch (IOException e) {\r\n                                System.out.println(\"Error\");\r\n                            } catch (NumberFormatException e) {\r\n                                System.out.println(\"Ingreso de datos erroneo\");\r\n                            }\r\n                            break;\r\n                        default:\r\n                            System.out.println(\"Opción no disponible\");\r\n                            break;\r\n                    }\r\n                } catch (NumberFormatException e) {\r\n                    System.out.println(\"Opción no disponible\");\r\n                    retry = true;\r\n                }\r\n            } while (retry);\r\n        } while (opc != 0);\r\n    }\r\n\r\n    @Override\r\n    public void privateAccessSupermarketMenu() throws IOException {\r\n        Scanner sc = new Scanner(System.in);\r\n        Integer opc = null;\r\n        Boolean retry;\r\n        Supermarket supermarketExists;\r\n        ProductForSale product;\r\n\r\n\r\n        do {\r\n            System.out.println(\"======================= ABML SUPERMERCADO ============================\");\r\n            System.out.println(\"            [1] CREAR SUPERMERCADO\");\r\n            System.out.println(\"            [2] MODIFICAR SUPERMERCADO\");\r\n            System.out.println(\"            [3] ELIMINAR SUPERMERCADO\");\r\n            System.out.println(\"            [4] LISTADO DE SUPERMERCADOS\");\r\n            System.out.println(\"            [5] AÑADIR PRODUCTO\");\r\n            System.out.println(\"            [6] MODIFICAR PRECIO\");\r\n            System.out.println(\"            [7] ELIMINAR PRODUCTO\");\r\n            System.out.println(\"            [8] APLICAR OFERTA\");\r\n            System.out.println(\"            [9] SACAR OFERTA\");\r\n            System.out.println(\"            [0] SALIR\\n\");\r\n\r\n            do {\r\n                retry = false;\r\n                try {\r\n                    System.out.print(\">\");\r\n                    opc = Integer.parseInt(sc.nextLine());\r\n\r\n                    switch (opc) {\r\n                        case 0:\r\n                            System.out.println(\"Volviendo...\");\r\n                            System.out.println(\"\\n\\n\\n\\n\\n\");\r\n                            break;\r\n                        case 1:\r\n                            //region Crear un nuevo supermercado\r\n                            supermarketService.addSupermarket();\r\n                            //endregion\r\n                            break;\r\n                        case 2:\r\n                            //region Modificar un supermercado ya existente\r\n                            System.out.println(\"Ingrese el nombre del supermercado a modificar: \");\r\n                            String name = sc.nextLine();\r\n                            if (supermarketService.search(name) == null) {\r\n                                System.out.println(\"el supermercado que desea modificar no existe en la base de datos\");\r\n                            } else {\r\n                                supermarketService.modifySupermarket(name);\r\n                            }\r\n                            //endregion\r\n                            break;\r\n                        case 3:\r\n                            //region Eliminar un supermercado existente\r\n                            System.out.println(\"Ingrese el nombre del supermercado a eliminar: \");\r\n                            String superName = sc.nextLine();\r\n                            if (supermarketService.search(superName) == null) {\r\n                                System.out.println(\"el supermercado que desea modificar no existe en la base de datos\");\r\n                            } else {\r\n                                supermarketService.deleteSupermarket(supermarketService.search(superName));\r\n                            }\r\n                            //endregion\r\n                            break;\r\n                        case 4:\r\n                            //region Listado de supermercados existentes\r\n                            supermarketService.supermarketList();\r\n                            //endregion\r\n                            break;\r\n                        case 5:\r\n                            //region Agregar producto vendible a un supermercado existente\r\n                            System.out.println(\"Ingrese el nombre del supermercado: \");\r\n                            name = sc.nextLine();\r\n                            if (supermarketService.search(name) == null) {\r\n                                System.out.println(\"el supermercado que desea no existe en la base de datos\");\r\n                            } else {\r\n                                productForSaleService.addProductForSale(supermarketService.search(name));\r\n                            }\r\n                            //endregion\r\n                            break;\r\n                        case 6:\r\n                            //region Modificar Precio del Producto Vendible de un supermercado existente\r\n                            System.out.println(\"Ingrese el nombre del supermercado: \");\r\n                            name = sc.nextLine();\r\n                            supermarketExists = supermarketService.search(name);\r\n                            if (supermarketExists == null) { //No encuentro el supermercado\r\n                                System.out.println(\"Este supermercado no existe en la base de datos\");\r\n                            } else { //Encuentro el supermercado\r\n                                System.out.println(\"Ingrese el id del producto que desea modificar...\");\r\n                                product = productForSaleService.searchProductoForSaleById(supermarketExists, sc.nextInt());\r\n                                if (product == null) { //No encuentro el producto en el supermercado\r\n                                    System.out.println(\"No existe el Id ingresado dentro del listado del supermercado \" + supermarketExists);\r\n                                } else {\r\n                                    System.out.println(\"Ingrese el precio nuevo : \");\r\n                                    product.setPrice(sc.nextDouble());\r\n                                    supermarketService.modifySupermarketListProducts(supermarketExists);\r\n                                }\r\n                            }\r\n                            //endregion de un superme\r\n                            break;\r\n                        case 7:\r\n                            //region Eliminar producto vendible de un supermercado existente\r\n                            System.out.println(\"Ingrese el nombre del supermercado: \");\r\n                            name = sc.nextLine();\r\n                            supermarketExists = supermarketService.search(name);\r\n                            if (supermarketExists == null) {\r\n                                System.out.println(\"el supermercado que desea no existe en la base de datos\");\r\n                            } else {\r\n                                System.out.println(\"Ingrese el id del producto que desea modificar...\");\r\n                                productForSaleService.removeProductForSaleForSupermarket(supermarketExists, sc.nextInt());\r\n                            }\r\n                            //endregion\r\n                            break;\r\n                        case 8:\r\n                            //region Aplicar Oferta\r\n                            System.out.println(\"Ingrese el nombre del supermercado: \");\r\n                            name = sc.nextLine();\r\n                            supermarketExists = supermarketService.search(name);\r\n                            if (supermarketExists == null) {\r\n                                System.out.println(\"el supermercado que desea no existe en la base de datos\");\r\n                            } else {\r\n                                menuDiscountOn(supermarketExists);\r\n                            }\r\n                            //endregion\r\n                            break;\r\n                        case 9:\r\n                            //region Sacar Oferta\r\n                            System.out.println(\"Ingrese el nombre del supermercado: \");\r\n                            name = sc.nextLine();\r\n                            supermarketExists = supermarketService.search(name);\r\n                            if (supermarketExists == null) {\r\n                                System.out.println(\"el supermercado que desea no existe en la base de datos\");\r\n                            } else {\r\n                                menuDiscountOff(supermarketExists);\r\n                            }\r\n                            //endregion\r\n                            break;\r\n                        default:\r\n                            System.out.println(\"Opción no disponible\");\r\n                            break;\r\n                    }\r\n                } catch (NumberFormatException e) {\r\n                    System.out.println(\"Opción no disponible\");\r\n                    retry = true;\r\n                }\r\n            } while (retry);\r\n        } while (opc != 0);\r\n    } //LISTO FALTA PROBAR\r\n\r\n    public void menuDiscountOn(Supermarket s) throws IOException {\r\n        Integer opc = null;\r\n        Boolean retry;\r\n        Category c;\r\n        Scanner sc = new Scanner(System.in);\r\n        do {\r\n            System.out.println(\"            APLICAR OFERTA: \");\r\n            System.out.println(\"          [1] - Por Categoria\");\r\n            System.out.println(\"          [2] - Por producto puntual\");\r\n            System.out.println(\"          [3] - Por Marca\");\r\n            System.out.println(\"          [0] - Salir\");\r\n            System.out.println(\"          Ingrese una opcion:\");\r\n\r\n            do {\r\n                retry = false;\r\n                try {\r\n                    System.out.print(\">\");\r\n                    opc = Integer.parseInt(sc.nextLine());\r\n\r\n                    switch (opc) {\r\n                        case 1:\r\n                            ProductServiceImpl.showCategories();\r\n                            System.out.println(\"Ingrese la categoria deseada:\");\r\n                            c = ProductServiceImpl.selectCategory(sc.nextInt());\r\n                            if (c != null) {\r\n                                System.out.println(\"Ingrese el porcentaje de descuento deseado:\");\r\n                                Integer percent = sc.nextInt();\r\n                                for (ProductForSale p : s.getProductList()) {\r\n                                    if (p.getProduct().getCategory() == c) {\r\n                                        p.setDiscountPercent(percent);\r\n                                        p.setOnSale(true);\r\n                                        System.out.println(p);\r\n                                    }\r\n                                }\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            System.out.println(\"Ingrese el ID del producto:\");\r\n                            Integer idSelect = sc.nextInt();\r\n                            if (productForSaleService.validationId(idSelect)) {\r\n                                System.out.println(\"Ingrese el porcentaje de descuento deseado:\");\r\n                                Integer percent = sc.nextInt();\r\n                                for (ProductForSale p : s.getProductList()) {\r\n                                    if (p.getProduct().getID().equals(idSelect)) {\r\n                                        p.setDiscountPercent(percent);\r\n                                        p.setOnSale(true);\r\n                                        System.out.println(p);\r\n                                    }\r\n                                }\r\n                            }\r\n                            break;\r\n                        case 3:\r\n                            System.out.println(\"Ingrese la marca:\");\r\n                            String brandSelect = sc.nextLine();\r\n                            Boolean flag = false;\r\n                            System.out.println(\"Ingrese el porcentaje de descuento deseado:\");\r\n                            Integer percent = sc.nextInt();\r\n                            for (ProductForSale p : s.getProductList()) {\r\n                                if (p.getProduct().getBrand().equalsIgnoreCase(brandSelect)) {\r\n                                    p.setDiscountPercent(percent);\r\n                                    p.setOnSale(true);\r\n                                    System.out.println(p);\r\n                                    flag = true;\r\n                                }\r\n                            }\r\n                            if (!flag) {\r\n                                System.out.println(\"No existen productos con esa marca\");\r\n                            }\r\n                            break;\r\n                        case 0:\r\n                            break;\r\n                        default:\r\n                            System.out.println(\"Ingrese una opcion correcta\");\r\n                            break;\r\n                    }\r\n                } catch (NumberFormatException e) {\r\n                    System.out.println(\"Opción no disponible\");\r\n                    retry = true;\r\n                }\r\n            } while (retry);\r\n        } while (opc != 0);\r\n    }\r\n\r\n    public void menuDiscountOff(Supermarket s) throws IOException {\r\n        Scanner sc = new Scanner(System.in);\r\n        Category c;\r\n        Integer opc = null;\r\n        Boolean retry;\r\n        do {\r\n            System.out.println(\"            RETIRAR OFERTA: \");\r\n            System.out.println(\"          [1] - Por Categoria\");\r\n            System.out.println(\"          [2] - Por producto puntual\");\r\n            System.out.println(\"          [3] - Por Marca\");\r\n            System.out.println(\"          [0] - Salir\");\r\n            System.out.println(\"          Ingrese una opcion:\");\r\n\r\n            do {\r\n                retry = false;\r\n                try {\r\n                    System.out.print(\">\");\r\n                    opc = Integer.parseInt(sc.nextLine());\r\n\r\n                    switch (opc) {\r\n                        case 1:\r\n                            ProductServiceImpl.showCategories();\r\n                            System.out.println(\"Ingrese la categoria deseada:\");\r\n                            c = ProductServiceImpl.selectCategory(sc.nextInt());\r\n                            if (c != null) {\r\n                                for (ProductForSale p : s.getProductList()) {\r\n                                    if (p.getProduct().getCategory() == c) {\r\n                                        p.setOnSale(false);\r\n                                    }\r\n                                }\r\n                                System.out.println(\"Oferta eliminada\");\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            System.out.println(\"Ingrese el ID del producto:\");\r\n                            Integer idSelect = sc.nextInt();\r\n                            if (productForSaleService.validationId(idSelect)) {\r\n                                for (ProductForSale p : s.getProductList()) {\r\n                                    if (p.getProduct().getID().equals(idSelect)) {\r\n                                        p.setOnSale(false);\r\n                                    }\r\n                                }\r\n                                System.out.println(\"Oferta eliminada\");\r\n                            }\r\n                            break;\r\n                        case 3:\r\n                            System.out.println(\"Ingrese la marca:\");\r\n                            String brandSelect = sc.nextLine();\r\n                            for (ProductForSale p : s.getProductList()) {\r\n                                if (p.getProduct().getBrand().equalsIgnoreCase(brandSelect)) {\r\n                                    p.setOnSale(false);\r\n                                }\r\n                            }\r\n                            System.out.println(\"Oferta eliminada\");\r\n                            break;\r\n                        case 0:\r\n                            break;\r\n                        default:\r\n                            System.out.println(\"Ingrese una opcion correcta!\");\r\n                            break;\r\n                    }\r\n                } catch (NumberFormatException e) {\r\n                    System.out.println(\"Opción no disponible\");\r\n                    retry = true;\r\n                }\r\n            } while (retry);\r\n        } while (opc != 0);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Service/impl/MenusServiceImpl.java b/src/Service/impl/MenusServiceImpl.java
--- a/src/Service/impl/MenusServiceImpl.java	(revision 52f99cb0ad96e14de5ba2639d5ccfdf335951cbd)
+++ b/src/Service/impl/MenusServiceImpl.java	(date 1719539145683)
@@ -170,7 +170,7 @@
                             String nameProduct = sc.nextLine();
                             List<ProductForSale> productsList = supermarketService.searchSpecialProductsByName(nameProduct);
                             if (!productsList.isEmpty()) {
-                                productForSaleService.addCartFromListProductForSale(productsList);
+                                cartService.addCartFromListProductForSale(productsList);
                             } else {
                                 System.out.println("El supermercado aun no tiene productos con esa descripcion");
                             }
@@ -182,7 +182,7 @@
                             List<ProductForSale> productsInSale = supermarketService.searchSalesProducts();
                             System.out.println(">>>>>>>>>>>>>>>>>> LISTA DE PRODUCTOS EN OFERTA <<<<<<<<<<<<<<<<<<<<<<");
                             if (!productsInSale.isEmpty()) {
-                                productForSaleService.addCartFromListProductForSale(productsInSale);
+                                cartService.addCartFromListProductForSale(productsInSale);
                             } else {
                                 System.out.println("El supermercado aun no tiene productos en oferta");
                             }
@@ -199,7 +199,7 @@
                                     case 0:
                                         List<ProductForSale> listDairy = supermarketService.searchProductsByCategory(Category.DAIRY);
                                         if (!listDairy.isEmpty()) {
-                                            productForSaleService.addCartFromListProductForSale(listDairy);
+                                            cartService.addCartFromListProductForSale(listDairy);
                                         } else {
                                             System.out.println("No existe la categoria lacteos en los supermercados");
                                         }
@@ -207,7 +207,7 @@
                                     case 1:
                                         List<ProductForSale> listBakery = supermarketService.searchProductsByCategory(Category.BAKERY);
                                         if (!listBakery.isEmpty()) {
-                                            productForSaleService.addCartFromListProductForSale(listBakery);
+                                            cartService.addCartFromListProductForSale(listBakery);
                                         } else {
                                             System.out.println("No existe la categoria panaderia en los supermercados");
                                         }
@@ -215,7 +215,7 @@
                                     case 2:
                                         List<ProductForSale> listGrocery = supermarketService.searchProductsByCategory(Category.GROCERY);
                                         if (!listGrocery.isEmpty()) {
-                                            productForSaleService.addCartFromListProductForSale(listGrocery);
+                                            cartService.addCartFromListProductForSale(listGrocery);
                                         } else {
                                             System.out.println("No existe la categoria alimentos en los supermercados");
                                         }
@@ -223,7 +223,7 @@
                                     case 3:
                                         List<ProductForSale> listAlcohol = supermarketService.searchProductsByCategory(Category.ALCOHOL);
                                         if (!listAlcohol.isEmpty()) {
-                                            productForSaleService.addCartFromListProductForSale(listAlcohol);
+                                            cartService.addCartFromListProductForSale(listAlcohol);
                                         } else {
                                             System.out.println("No existe la categoria bebidas alcoholicas en los supermercados");
                                         }
@@ -236,14 +236,8 @@
                             //endregion
                             break;
                         case 4:
-                            //region Mostrar carrito y grabar
+                            //region Mostrar carrito
                             cartService.showCartsProductList();
-                            System.out.println("Desea confirmar el carrito?. s/n");
-                            if (sc.nextLine().equalsIgnoreCase("s")) {
-                                cartService.saveCartList();
-                            } else {
-                                System.out.println("Continue agregando productos.");
-                            }
                             //endregion
                             break;
                         case 5:
@@ -334,7 +328,7 @@
                                 System.out.println("Ingrese el nombre del producto buscado: ");
                                 productsForSale = supermarketService.serchProductByNameInSupermarket(supermarketSelect, sc.nextLine());
                                 if (!productsForSale.isEmpty()) {
-                                    productForSaleService.addCartFromListProductForSale(productsForSale);
+                                    cartService.addCartFromListProductForSale(productsForSale);
                                 } else {
                                     System.out.println("El supermercado aun no tiene productos con esa descripcion");
                                 }
@@ -344,7 +338,7 @@
                                 //region Busqueda de productos en oferta en un supermercado seleccionado
                                 productsForSale = supermarketService.serchProductInSaleInSupermarket(supermarketSelect);
                                 if (!productsForSale.isEmpty()) {
-                                    productForSaleService.addCartFromListProductForSale(productsForSale);
+                                    cartService.addCartFromListProductForSale(productsForSale);
                                 } else {
                                     System.out.println("El supermercado aun no tiene productos en oferta");
                                 }
@@ -360,7 +354,7 @@
                                         case 0:
                                             List<ProductForSale> listDairy = supermarketService.serchByCategoryInSupermarket(supermarketSelect, Category.DAIRY);
                                             if (!listDairy.isEmpty()) {
-                                                productForSaleService.addCartFromListProductForSale(listDairy);
+                                                cartService.addCartFromListProductForSale(listDairy);
                                             } else {
                                                 System.out.println("No existe la categoria lacteos en los supermercados");
                                             }
@@ -368,7 +362,7 @@
                                         case 1:
                                             List<ProductForSale> listBakery = supermarketService.serchByCategoryInSupermarket(supermarketSelect, Category.BAKERY);
                                             if (!listBakery.isEmpty()) {
-                                                productForSaleService.addCartFromListProductForSale(listBakery);
+                                                cartService.addCartFromListProductForSale(listBakery);
                                             } else {
                                                 System.out.println("No existe la categoria panaderia en los supermercados");
                                             }
@@ -376,7 +370,7 @@
                                         case 2:
                                             List<ProductForSale> listGrocery = supermarketService.serchByCategoryInSupermarket(supermarketSelect, Category.GROCERY);
                                             if (!listGrocery.isEmpty()) {
-                                                productForSaleService.addCartFromListProductForSale(listGrocery);
+                                                cartService.addCartFromListProductForSale(listGrocery);
                                             } else {
                                                 System.out.println("No existe la categoria alimentos en los supermercados");
                                             }
@@ -384,7 +378,7 @@
                                         case 3:
                                             List<ProductForSale> listAlcohol = supermarketService.serchByCategoryInSupermarket(supermarketSelect, Category.ALCOHOL);
                                             if (!listAlcohol.isEmpty()) {
-                                                productForSaleService.addCartFromListProductForSale(listAlcohol);
+                                                cartService.addCartFromListProductForSale(listAlcohol);
                                             } else {
                                                 System.out.println("No existe la categoria bebidas alcoholicas en los supermercados");
                                             }
@@ -397,14 +391,8 @@
                                 //endregion
                                 break;
                             case 4:
-                                //region Mostrar el carrito y grabar
+                                //region Mostrar el carrito
                                 cartService.showCartsProductList();
-                                System.out.println("Desea confirmar el carrito?. s/n");
-                                if (sc.nextLine().equalsIgnoreCase("s")) {
-                                    cartService.saveCartList();
-                                } else {
-                                    System.out.println("Continue agregando productos.");
-                                }
                                 //endregion
                                 break;
                             case 5:
Index: src/Service/impl/SupermarketServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Service.impl;\r\n\r\nimport Models.Product;\r\nimport Models.Supermarket;\r\nimport Models.*;\r\nimport Service.SupermarketService;\r\nimport com.fasterxml.jackson.core.type.TypeReference;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nimport Enums.Category;\r\n\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class SupermarketServiceImpl implements SupermarketService, Serializable {\r\n    private final File supermarketFile = new File(\"supermarket.json\");\r\n    private Map<String, Supermarket> superMarketList = supermarketsListJson(); //cuit y supermercado //cuit y supermercado\r\n\r\n    public SupermarketServiceImpl() throws IOException {\r\n    }\r\n\r\n    //region ABM-----------------------------------------------------------------\r\n\r\n    @Override\r\n    public void addSupermarket() throws IOException {\r\n        Scanner sc = new Scanner(System.in);\r\n        String name;\r\n        boolean alfa;\r\n\r\n        System.out.println(\"Ingrese nombre/denominacion: \");\r\n        do {\r\n            //ingresa el nombre por teclado\r\n            name = sc.nextLine();\r\n            //valido que sean caracteres, retorna true si lo son\r\n            alfa = Pattern.matches(\"^[a-zA-Z]*$\", name);\r\n            if (!alfa) {\r\n                //si es false envio mensaje y vuelve a intentar hasta que sea correcto\r\n                System.out.println(\"Ingrese solo caracteres por favor\");\r\n            }\r\n        } while (!alfa);\r\n\r\n        if (search(name) == null) {\r\n            //busco que no exista un supermercado con ese nombre\r\n            System.out.println(\"Ingrese direccion: \");\r\n            String address = sc.nextLine();\r\n            //ingresa direccion por teclado sin validar\r\n            System.out.println(\"Ingrese telefono: \");\r\n            String phone;//variable para ingresar el telefono\r\n            String newPhone;//variable para validar telefono\r\n            do {\r\n                //Ingresa telefono por teclado\r\n                phone = sc.nextLine();\r\n                //convierto el telefono a string para validar y le quito los guiones por si lo ingresa como un 0800\r\n                newPhone = phone.replaceAll(\"-\", \"\");\r\n\r\n                alfa = Pattern.matches(\"^[a-zA-Z]*$\", newPhone);\r\n                //retorna true si ingresan letras\r\n                if (alfa) {\r\n                    System.out.println(\"Ingrese solo numeros por favor\");\r\n                }\r\n                //valido que sea una cantidad minima de numeros\r\n                if (newPhone.length() < 10) {\r\n                    System.out.println(\"Ingrese la cantidad de numeros correctos\");\r\n                }\r\n            } while (alfa || newPhone.length() < 10);\r\n\r\n            System.out.println(\"Ingrese clave de indentificacion tributaria: \");\r\n            String cuit;\r\n            String newCuit;\r\n            do {\r\n                //Ingresa CUIT\r\n                cuit = sc.nextLine();\r\n                //Elimino los guiones del cuit para validar que sean numeros\r\n                newCuit = cuit.replaceAll(\"-\", \"\");\r\n                //alfa es true si son caracteres\r\n                alfa = Pattern.matches(\"^[a-zA-Z]*$\", newCuit);\r\n                //informo si ingresa letras que ingrese numeros\r\n                if (alfa) {\r\n                    System.out.println(\"Ingrese solo numeros por favor\");\r\n                }\r\n                //informo si no tiene la longitud correcta de un CUIT\r\n                if (newCuit.length() != 11) {\r\n                    System.out.println(\"Ingrese un cuit correcto\");\r\n                }\r\n            } while (alfa || newCuit.length() != 11);//el while continua hasta que no se ingrese correctamente\r\n\r\n            //verifico que el cuit no se encuentre en el listado simplemente para poder informar con leyenda que ya se encuentra\r\n            if (superMarketList.containsKey(cuit)) {\r\n                System.out.println(\"El CUIT ya se encuentra en el listado de supermercado\");\r\n            } else {\r\n                //instanciamos el nuevo supermercado\r\n                Supermarket s = new Supermarket(name, address, phone, cuit);\r\n                //agregamos al map de lista de supermercados\r\n                superMarketList.put(s.getCuit(), s);\r\n                //y grabamos en el json informando que se grabo con exito\r\n                saveSupermarketInJsonFile(superMarketList);\r\n                System.out.println(\"Nuevo Supermercado agregado con exito\");\r\n            }\r\n\r\n        } else {\r\n            System.out.println(\"El supermercado que desea dar de alta ya existe en la base, con los siguientes datos:\");\r\n            System.out.println(search(name));\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void deleteSupermarket(Supermarket s) throws IOException {\r\n        Scanner sc = new Scanner(System.in);\r\n\r\n        //pregunto si desea eliminar el supermercado y muestro para verificar datos correctos\r\n        System.out.println(\"Desea eliminar el supermerdado \" + s.getName() + \"[CUIT: \" + s.getCuit() + \"] ? s/n\");\r\n        sc.nextLine();\r\n        String opc = sc.nextLine();\r\n        if (opc.equalsIgnoreCase(\"s\")) {\r\n            //en caso de afirmacion procedo a eliminar\r\n            this.superMarketList.remove(s.getCuit());\r\n            //guardo la modificacion en el json\r\n            saveSupermarketInJsonFile(superMarketList);\r\n            //informo el movimiento\r\n            System.out.println(\"El supermercado \" + s.getName() + \" fue dado de baja exitosamente!!!\");\r\n        } else {\r\n            System.out.println(\"Volviendo al menu anterior\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void modifySupermarketListProducts(Supermarket s) throws IOException {\r\n\r\n        for (Map.Entry<String, Supermarket> entry : superMarketList.entrySet()) {\r\n            if (s.getName().equalsIgnoreCase(entry.getValue().getName())) {\r\n                System.out.println(\"muestre precio en funcion de grabar \"+ s);\r\n                entry.setValue(s);\r\n            }\r\n        }\r\n\r\n        saveSupermarketInJsonFile(superMarketList);\r\n    }\r\n\r\n    @Override\r\n    public void modifySupermarket(String name) throws IOException {\r\n\r\n        Supermarket s = search(name);\r\n        Integer opc;\r\n        Scanner sr = new Scanner(System.in);\r\n        Scanner st = new Scanner(System.in);\r\n        boolean alfa;\r\n\r\n        do {\r\n            System.out.println(\"ELIGE CAMPO A MODIFICAR\");\r\n            System.out.println(\"1 - Nombre\");\r\n            System.out.println(\"2 - Domicilio\");\r\n            System.out.println(\"3 - Telefono\");\r\n            System.out.println(\"4 - CUIT\");\r\n            System.out.println(\"5 - Salir\");\r\n            opc = sr.nextInt();\r\n            switch (opc) {\r\n                case 1:\r\n                    System.out.println(\"Ingrese nuevo nombre: \");\r\n                    String supermarketName;\r\n                    do {\r\n                        supermarketName = st.nextLine();\r\n                        alfa = Pattern.matches(\"^[a-zA-Z]*$\", supermarketName);\r\n                        if (!alfa) {\r\n                            System.out.println(\"Ingrese solo caracteres por favor\");\r\n                        }\r\n                    } while (!alfa);\r\n                    s.setName(supermarketName);\r\n                    break;\r\n                case 2:\r\n                    System.out.println(\"Ingrese nuevo domicilio: \");\r\n                    s.setAddress(sr.nextLine());\r\n                    break;\r\n                case 3:\r\n                    System.out.println(\"Ingrese nuevo telefono: \");\r\n                    String phone;\r\n                    String newPhone;\r\n                    do {\r\n                        phone = sr.nextLine();\r\n                        newPhone = phone.replaceAll(\"-\", \"\");\r\n                        alfa = Pattern.matches(\"^[a-zA-Z]*$\", newPhone);\r\n                        if (alfa) {\r\n                            System.out.println(\"Ingrese solo numeros por favor\");\r\n                        }\r\n                        if (newPhone.length() < 10) {\r\n                            System.out.println(\"Ingrese la cantidad de numeros correctos\");\r\n                        }\r\n                    } while (alfa || newPhone.length() < 10);\r\n                    s.setPhone(phone);\r\n                    break;\r\n                case 4:\r\n                    System.out.println(\"Ingrese nueva CUIT: \");\r\n                    String cuit;\r\n                    String newCuit;\r\n                    do {\r\n                        cuit = sr.nextLine();\r\n                        newCuit = cuit.replaceAll(\"-\", \"\");\r\n                        alfa = Pattern.matches(\"^[a-zA-Z]*$\", newCuit);\r\n                        if (alfa) {\r\n                            System.out.println(\"Ingrese solo numeros por favor\");\r\n                        }\r\n                        if (newCuit.length() != 11) {\r\n                            System.out.println(\"Ingrese un cuit correcto\");\r\n                        }\r\n                    } while (alfa || newCuit.length() != 11);\r\n                    s.setCuit(cuit);\r\n                case 5:\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Ingrese una opcion valida\");\r\n                    break;\r\n            }\r\n\r\n        } while (opc != 5);\r\n\r\n        saveSupermarketInJsonFile(superMarketList);\r\n        System.out.println(\"Datos guardados exitosamente!!!\");\r\n\r\n    }\r\n\r\n    @Override\r\n    public void supermarketList() {\r\n\r\n        for (Map.Entry<String, Supermarket> entry : this.superMarketList.entrySet()) {\r\n            System.out.println(\"        SUPERMERCADO: \");\r\n            System.out.println(\"Nombre:     \" + entry.getValue().getName());\r\n            System.out.println(\"Domicilio:  \" + entry.getValue().getAddress());\r\n            System.out.println(\"telefono:   \" + entry.getValue().getPhone());\r\n            System.out.println(\"CUIT:       \" + entry.getValue().getCuit());\r\n            System.out.println(\"        LISTADO DE PRODUCTOS DEL SUPERMERCADO \" + entry.getValue().getName() + \":\");\r\n            for (ProductForSale p : entry.getValue().getProductList()) {\r\n                System.out.println(p);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void saveSupermarketInJsonFile(Map<String, Supermarket> superList) throws IOException {\r\n        try {\r\n            ObjectMapper mapper = new ObjectMapper();\r\n            mapper.writeValue(supermarketFile, superList);\r\n        } catch (IOException e) {\r\n            System.out.println(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Supermarket> supermarketsListJson() throws IOException {\r\n        /*TypeReference<HashMap<String, Supermarket>> typeReferenceMap = new TypeReference<HashMap<String, Supermarket>>() {\r\n        };*/\r\n        return new ObjectMapper().readValue(supermarketFile, new TypeReference<Map<String, Supermarket>>(){});\r\n    }\r\n    //endregion\r\n\r\n    //region BÚSQUEDA POR SUPERMERCADO-------------------------------------------\r\n    @Override\r\n    public Supermarket search(String name) {\r\n        Supermarket supermarket = null;\r\n\r\n        //busca supermercado por nombre en el map general del json\r\n        for (Map.Entry<String, Supermarket> entry : superMarketList.entrySet()) {\r\n            if (entry.getValue().getName().equalsIgnoreCase(name)) {\r\n                supermarket = entry.getValue();\r\n            }\r\n        }\r\n        //si encuentra retorna supermercado sino retorna null\r\n        return supermarket;\r\n    }\r\n\r\n    @Override\r\n    public void showListSupermarket(Supermarket supermarket) {\r\n        if (supermarket != null) {\r\n            // muestra la lista de supermercados si existe\r\n            System.out.println(supermarket);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<ProductForSale> serchByCategoryInSupermarket(Supermarket supermarket, Category category) {\r\n\r\n        //creo una lista de productos que coincidan con la categoria enviada por parametro\r\n        List<ProductForSale> productForCategory = new ArrayList<>();\r\n        for (ProductForSale p : superMarketList.get(supermarket.getCuit()).getProductList()) {\r\n            if (p.getProduct().getCategory() == (category)) {\r\n                productForCategory.add(p);\r\n            }\r\n        }\r\n        return productForCategory;\r\n    }\r\n\r\n    @Override\r\n    public List<ProductForSale> serchProductInSaleInSupermarket(Supermarket supermarket) {\r\n\r\n        //recorro y armo una lista de productos que esten en oferta\r\n        List<ProductForSale> productsInSale = new ArrayList<>();\r\n        for (ProductForSale p : superMarketList.get(supermarket.getCuit()).getProductList()) {\r\n            if (p.getOnSale()) {\r\n                productsInSale.add(p);\r\n            }\r\n        }\r\n        return productsInSale;\r\n    }\r\n\r\n    @Override\r\n    public List<ProductForSale> serchProductByNameInSupermarket(Supermarket supermarket, String name) {\r\n\r\n        name = name.toLowerCase();\r\n        //recorro y busco productos que contengan en su descripcion lo pasado por parametro\r\n        List<ProductForSale> products = new ArrayList<>();\r\n        for (ProductForSale p : supermarket.getProductList()) {\r\n            if (p.getProduct().getProductName().toLowerCase().contains(name)) {\r\n                products.add(p);\r\n            }\r\n        }\r\n        return products;\r\n\r\n    }\r\n    //endregion\r\n\r\n    //region BÚSQUEDA GENERAL----------------------------------------------------\r\n    @Override\r\n    public List<ProductForSale> searchSalesProducts() {\r\n        //creo una lista nueva de productos para cargar los productos que coincidan con el filtro en oferta\r\n        List<ProductForSale> listProduct = new ArrayList<>();\r\n\r\n        //recorro la lista de supermercados\r\n        for (Map.Entry<String, Supermarket> entry : superMarketList.entrySet()) {\r\n            //si el supermercado tiene productos en su lista recorro (osea si no esta vacia)\r\n            if (!entry.getValue().getProductList().isEmpty()) {\r\n                //recorro el Set de productos de cada supermercado\r\n                for (ProductForSale p : entry.getValue().getProductList()) {\r\n                    if (p.getOnSale()) {\r\n                        //agrego a la lista los productos que esten en oferta\r\n                        listProduct.add(p);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return listProduct;\r\n    }\r\n\r\n    @Override\r\n    public List<ProductForSale> searchSpecialProductsByName(String name) {\r\n\r\n        //me aseguro que este todo en minuscula para comparar despues con los productos del json\r\n        name = name.toLowerCase();\r\n        //creo una lista nueva de productos para cargar los productos que coincidan con el filtro en oferta\r\n        List<ProductForSale> listProduct = new ArrayList<>();\r\n\r\n        //recorro la lista de supermercados\r\n        for (Map.Entry<String, Supermarket> entry : superMarketList.entrySet()) {\r\n            //si el supermercado tiene productos en su lista recorro (osea si no esta vacia)\r\n            if (!entry.getValue().getProductList().isEmpty()) {\r\n                //recorro el Set de productos de cada supermercado\r\n                for (ProductForSale p : entry.getValue().getProductList()) {\r\n                    if (p.getProduct().getProductName().toLowerCase().contains(name)) {\r\n                        //agrego a la lista los productos que esten en oferta\r\n                        listProduct.add(p);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return listProduct;\r\n    }\r\n\r\n    @Override\r\n    public List<ProductForSale> searchProductsByCategory(Category c) {\r\n        //creo una lista nueva de productos para cargar los productos que coincidan con el filtro en oferta\r\n        List<ProductForSale> listProduct = new ArrayList<>();\r\n\r\n        //recorro la lista de supermercados\r\n        for (Map.Entry<String, Supermarket> entry : superMarketList.entrySet()) {\r\n            //si el supermercado tiene productos en su lista recorro (osea si no esta vacia)\r\n            if (!entry.getValue().getProductList().isEmpty()) {\r\n                //recorro el Set de productos de cada supermercado\r\n                for (ProductForSale p : entry.getValue().getProductList()) {\r\n                    if (p.getProduct().getCategory() == (c)) {\r\n                        //agrego a la lista los productos que esten en oferta\r\n                        listProduct.add(p);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return listProduct;\r\n\r\n    }\r\n\r\n    @Override\r\n    public Boolean searchSpecialProductsByNameExist(String name) {\r\n        //me aseguro que este todo en minuscula para comparar despues con los productos del json\r\n        name = name.toLowerCase(Locale.ROOT);\r\n\r\n        //recorro la lista de supermercados\r\n        for (Map.Entry<String, Supermarket> entry : superMarketList.entrySet()) {\r\n            //si el supermercado tiene productos en su lista recorro (osea si no esta vacia)\r\n            if (!entry.getValue().getProductList().isEmpty()) {\r\n                //recorro el Set de productos de cada supermercado\r\n                for (ProductForSale p : entry.getValue().getProductList()) {\r\n                    //paso a minuscula el nombre del producto\r\n                    String nameProductSupermarket = p.getProduct().getProductName().toLowerCase(Locale.ROOT);\r\n                    if (nameProductSupermarket.contains(name)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public void updateProductData(Product updated) throws IOException {\r\n        for (Map.Entry<String, Supermarket> entry : superMarketList.entrySet()) { //entry.getValue() = un supermercado\r\n            for (ProductForSale p : entry.getValue().getProductList()) { //p = un producto vendible de un supermercado\r\n                if (p.getProduct().equals(updated)) { //Si coincide el id del producto vendible con el producto actualizado\r\n                    p.setProduct(updated); //Se actualizan todos los datos del producto vendible\r\n                }\r\n            }\r\n        }\r\n        saveSupermarketInJsonFile(superMarketList);\r\n    }\r\n//endregion\r\n\r\n    @Override\r\n    public void updateProductData(Product updated) throws IOException {\r\n        for (Map.Entry<String, Supermarket> entry : superMarketList.entrySet()) { //entry.getValue() = un supermercado\r\n            for (ProductForSale p : entry.getValue().getProductList()) { //p = un producto vendible de un supermercado\r\n                if (p.getProduct().equals(updated)) { //Si coincide el id del producto vendible con el producto actualizado\r\n                    p.setProduct(updated); //Se actualizan todos los datos del producto vendible\r\n                }\r\n            }\r\n        }\r\n        saveSupermarketInJsonFile(superMarketList);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Service/impl/SupermarketServiceImpl.java b/src/Service/impl/SupermarketServiceImpl.java
--- a/src/Service/impl/SupermarketServiceImpl.java	(revision 52f99cb0ad96e14de5ba2639d5ccfdf335951cbd)
+++ b/src/Service/impl/SupermarketServiceImpl.java	(date 1719538624138)
@@ -412,18 +412,6 @@
         }
         return false;
     }
-
-    @Override
-    public void updateProductData(Product updated) throws IOException {
-        for (Map.Entry<String, Supermarket> entry : superMarketList.entrySet()) { //entry.getValue() = un supermercado
-            for (ProductForSale p : entry.getValue().getProductList()) { //p = un producto vendible de un supermercado
-                if (p.getProduct().equals(updated)) { //Si coincide el id del producto vendible con el producto actualizado
-                    p.setProduct(updated); //Se actualizan todos los datos del producto vendible
-                }
-            }
-        }
-        saveSupermarketInJsonFile(superMarketList);
-    }
 //endregion
 
     @Override
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"092ad90e-7b8c-4dd4-b3a3-8ffe566365cd\" name=\"Changes\" comment=\"clases, constructors, getter and setter\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/foods.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/foods.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/ProyectoLaboIII/Models/Product.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/ProyectoLaboIII/Models/Product.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/BeverageServiceImpl.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/BeverageServiceImpl.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/FoodServiceImpl.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/FoodServiceImpl.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/MenusServiceImpl.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/MenusServiceImpl.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Models/Product.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Models/Product.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Service/SupermarketService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Service/SupermarketService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Service/impl/MenusServiceImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Service/impl/MenusServiceImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Service/impl/SupermarketServiceImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Service/impl/SupermarketServiceImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/supermarket.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/supermarket.json\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Enum\" />\r\n        <option value=\"Class\" />\r\n        <option value=\"Interface\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"lula-branch-4\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"ROOT_SYNC\" value=\"DONT_SYNC\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 7\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2hIBVAFB8fmxnvjqkrqpGwxKkIO\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Application.Main.executor&quot;: &quot;Run&quot;,\r\n    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;lula-branch-5&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/mariu/OneDrive/Escritorio/librerias  JSon/jackson-databind-2.17.1.jar&quot;,\r\n    &quot;onboarding.tips.debug.path&quot;: &quot;E:/Labo III/ProyectoLaboIII/src/Main.java&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Libraries&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\r\n      <option name=\"filePath\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"jdk-21.0.2-openjdk-21.0.2-4caba194b151-4f524021\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"092ad90e-7b8c-4dd4-b3a3-8ffe566365cd\" name=\"Changes\" comment=\"\" />\r\n      <created>1717271736874</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1717271736874</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"clases, constructors, getter and setter\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1717278016900</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1717278016900</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"CUSTOM_BOOLEAN_PROPERTIES\">\r\n                <map>\r\n                  <entry key=\"Show.Git.Branches\" value=\"true\" />\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"clases, constructors, getter and setter\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"clases, constructors, getter and setter\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-method\">\r\n          <url>file://$PROJECT_DIR$/src/Service/impl/ProductForSaleServiceImpl.java</url>\r\n          <line>222</line>\r\n          <properties class=\"Service.impl.ProductForSaleServiceImpl\" method=\"searchProductoForSaleById\">\r\n            <option name=\"EMULATED\" value=\"true\" />\r\n            <option name=\"WATCH_EXIT\" value=\"false\" />\r\n          </properties>\r\n          <option name=\"timeStamp\" value=\"4\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 52f99cb0ad96e14de5ba2639d5ccfdf335951cbd)
+++ b/.idea/workspace.xml	(date 1719539145760)
@@ -5,17 +5,30 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="092ad90e-7b8c-4dd4-b3a3-8ffe566365cd" name="Changes" comment="clases, constructors, getter and setter">
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_26_6_2024_20_03__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_26_6_2024_20_03__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_26_6_2024_20_03__Changes_1.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_26_6_2024_20_03__Changes_1.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/foods.json" beforeDir="false" afterPath="$PROJECT_DIR$/foods.json" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Models/Product.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Models/Product.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/BeverageServiceImpl.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/BeverageServiceImpl.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/FoodServiceImpl.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/FoodServiceImpl.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/MenusServiceImpl.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/MenusServiceImpl.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Models/Product.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Models/Product.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Service/SupermarketService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Service/SupermarketService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Models/Beverage.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Models/Cart.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Models/Food.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Models/Product.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Models/ProductForSale.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Models/Supermarket.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/BeverageService.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/FoodService.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/SupermarketService.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/BeverageServiceImpl.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/CartServiceImpl.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/FoodServiceImpl.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/MenusServiceImpl.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/ProductForSaleServiceImpl.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/ProductPersistenceImpl.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/ProductServiceImpl.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/SupermarketServiceImpl$1.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Service/impl/SupermarketServiceImpl.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/ProyectoLaboIII/Utils/Verification.class" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Service/impl/MenusServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Service/impl/MenusServiceImpl.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Service/impl/SupermarketServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Service/impl/SupermarketServiceImpl.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/supermarket.json" beforeDir="false" afterPath="$PROJECT_DIR$/supermarket.json" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -52,25 +65,25 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;Application.Main.executor&quot;: &quot;Run&quot;,
-    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;false&quot;,
-    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,
-    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,
-    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;lula-branch-5&quot;,
-    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/mariu/OneDrive/Escritorio/librerias  JSon/jackson-databind-2.17.1.jar&quot;,
-    &quot;onboarding.tips.debug.path&quot;: &quot;E:/Labo III/ProyectoLaboIII/src/Main.java&quot;,
-    &quot;project.structure.last.edited&quot;: &quot;Libraries&quot;,
-    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
-    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "Application.Main.executor": "Run",
+    "Downloaded.Files.Path.Enabled": "false",
+    "Repository.Attach.Annotations": "false",
+    "Repository.Attach.JavaDocs": "false",
+    "Repository.Attach.Sources": "false",
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "git-widget-placeholder": "main",
+    "kotlin-language-version-configured": "true",
+    "last_opened_file_path": "C:/Users/mariu/OneDrive/Escritorio/librerias  JSon/jackson-databind-2.17.1.jar",
+    "onboarding.tips.debug.path": "E:/Labo III/ProyectoLaboIII/src/Main.java",
+    "project.structure.last.edited": "Libraries",
+    "project.structure.proportion": "0.15",
+    "project.structure.side.proportion": "0.2"
   }
-}</component>
+}]]></component>
   <component name="RunManager">
     <configuration default="true" type="JetRunConfigurationType">
       <method v="2">
@@ -132,19 +145,4 @@
     <MESSAGE value="clases, constructors, getter and setter" />
     <option name="LAST_COMMIT_MESSAGE" value="clases, constructors, getter and setter" />
   </component>
-  <component name="XDebuggerManager">
-    <breakpoint-manager>
-      <breakpoints>
-        <line-breakpoint enabled="true" type="java-method">
-          <url>file://$PROJECT_DIR$/src/Service/impl/ProductForSaleServiceImpl.java</url>
-          <line>222</line>
-          <properties class="Service.impl.ProductForSaleServiceImpl" method="searchProductoForSaleById">
-            <option name="EMULATED" value="true" />
-            <option name="WATCH_EXIT" value="false" />
-          </properties>
-          <option name="timeStamp" value="4" />
-        </line-breakpoint>
-      </breakpoints>
-    </breakpoint-manager>
-  </component>
 </project>
\ No newline at end of file
